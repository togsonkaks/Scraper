// Amazon Diagnostic - Copy the entire output and paste it back to me
(function() {
  console.log("=".repeat(60));
  console.log("üîç AMAZON DIAGNOSTIC REPORT");
  console.log("=".repeat(60));
  
  const report = [];
  const images = new Set();
  
  // Helper to log and collect info
  function log(message) {
    console.log(message);
    report.push(message);
  }
  
  log(`üìç Current URL: ${window.location.href}`);
  log(`üìÑ Page Title: ${document.title}`);
  log("");
  
  // 1. Check main image containers
  log("1Ô∏è‚É£ CHECKING MAIN IMAGE CONTAINERS:");
  const mainSelectors = ['#ivLargeImage', '#landingImage', '.a-dynamic-image'];
  mainSelectors.forEach(sel => {
    const elements = document.querySelectorAll(sel);
    log(`   ${sel}: ${elements.length} elements found`);
    elements.forEach((el, i) => {
      const src = el.currentSrc || el.src;
      log(`     [${i}] src: ${src}`);
      if (src) images.add(src);
    });
  });
  log("");
  
  // 2. Check thumbnail gallery
  log("2Ô∏è‚É£ CHECKING THUMBNAIL GALLERY:");
  const thumbSelectors = ['#ivThumbColumn .ivThumb img', '.ivThumbs img', '.ivThumb img'];
  thumbSelectors.forEach(sel => {
    const elements = document.querySelectorAll(sel);
    log(`   ${sel}: ${elements.length} elements found`);
    elements.forEach((el, i) => {
      const src = el.currentSrc || el.src;
      const dataHires = el.getAttribute('data-old-hires') || el.getAttribute('data-a-hires');
      log(`     [${i}] src: ${src}`);
      if (dataHires) log(`     [${i}] data-hires: ${dataHires}`);
      if (src) images.add(src);
      if (dataHires) images.add(dataHires);
    });
  });
  log("");
  
  // 3. Check other possible containers
  log("3Ô∏è‚É£ CHECKING OTHER CONTAINERS:");
  const otherSelectors = ['[data-dp-carousel] img', '.a-carousel img', '#imageBlock img'];
  otherSelectors.forEach(sel => {
    const elements = document.querySelectorAll(sel);
    log(`   ${sel}: ${elements.length} elements found`);
    elements.forEach((el, i) => {
      const src = el.currentSrc || el.src;
      if (src) {
        log(`     [${i}] src: ${src}`);
        images.add(src);
      }
    });
  });
  log("");
  
  // 4. Show all found URLs
  log("4Ô∏è‚É£ ALL FOUND IMAGE URLS:");
  const allUrls = [...images];
  allUrls.forEach((url, i) => {
    log(`   [${i+1}] ${url}`);
  });
  log("");
  
  // 5. Test URL conversions
  log("5Ô∏è‚É£ TESTING HIGH-RES CONVERSIONS:");
  const converted = new Set();
  allUrls.forEach(url => {
    let newUrl = url.replace(/_AC_[SU][SXYL]\d+_/g, '_AC_SL1500_');
    newUrl = newUrl.replace(/\._[SU][SXYL]\d+_/g, '._SL1500_');
    if (newUrl !== url) {
      log(`   ‚úÖ ${url} ‚Üí ${newUrl}`);
    } else {
      log(`   ‚ö†Ô∏è  No conversion: ${url}`);
    }
    converted.add(newUrl);
  });
  log("");
  
  // 6. Final summary
  log("6Ô∏è‚É£ FINAL SUMMARY:");
  log(`   üìä Original URLs found: ${allUrls.length}`);
  log(`   üìä After conversion: ${converted.size}`);
  log(`   üìä Unique images: ${[...converted].length}`);
  log("");
  
  log("=".repeat(60));
  log("üìã COPY THIS ENTIRE OUTPUT AND PASTE IT BACK");
  log("=".repeat(60));
  
  // Return the report as a string for easy copying
  const reportText = report.join('\n');
  
  // Try to copy to clipboard if possible
  if (navigator.clipboard) {
    navigator.clipboard.writeText(reportText).then(() => {
      log("‚úÖ Report copied to clipboard!");
    }).catch(() => {
      log("‚ùå Could not copy to clipboard automatically");
    });
  }
  
  return {
    report: reportText,
    originalUrls: allUrls,
    convertedUrls: [...converted],
    summary: {
      originalCount: allUrls.length,
      convertedCount: converted.size
    }
  };
})();