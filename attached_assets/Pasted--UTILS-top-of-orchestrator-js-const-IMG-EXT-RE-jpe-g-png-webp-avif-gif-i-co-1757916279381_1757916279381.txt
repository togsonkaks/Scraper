// ===== UTILS (top of orchestrator.js) =====
const IMG_EXT_RE = /\.(jpe?g|png|webp|avif|gif)$/i;
const MONEY_RE   = /(\$|£|€|¥)?\s?([0-9]{1,3}(?:[.,][0-9]{3})*|[0-9]+)(?:[.,]?[0-9]{2})?/g;

function cleanText(n) {
  return (n?.textContent || '').replace(/\s+/g,' ').trim();
}

function jsonNum(s) {
  const n = parseFloat(String(s||'').replace(/[^\d.]/g,''));
  return isFinite(n) ? n : null;
}

function getJsonLd(document) {
  const out = [];
  for (const s of document.querySelectorAll('script[type="application/ld+json"]')) {
    try {
      const t = s.textContent.trim();
      if (!t) continue;
      const v = JSON.parse(t);
      out.push(v);
    } catch {}
  }
  return out;
}
function findProductNode(ld) {
  for (const j of ld) {
    if (!j) continue;
    if (j['@type'] === 'Product') return j;
    if (Array.isArray(j['@graph'])) {
      const p = j['@graph'].find(n => n && n['@type'] === 'Product');
      if (p) return p;
    }
  }
  return null;
}

// --- price helpers ---
function pickLowestNumber(str) {
  if (!str) return null;
  let best = null;
  for (const m of String(str).matchAll(MONEY_RE)) {
    const n = parseFloat(m[0].replace(/[^\d.]/g,''));
    if (!isNaN(n)) best = (best==null || n < best) ? n : best;
  }
  return best;
}
function numberFromAttrs(el) {
  if (!el) return null;
  const candidates = [
    el.getAttribute('content'),
    el.getAttribute('data-price'),
    el.getAttribute('aria-label'),
    el.getAttribute('aria-valuetext'),
  ].filter(Boolean).join(' ');
  return pickLowestNumber(candidates);
}
function scanAncestorForPrice(el, maxHops=3) {
  let cur = el;
  for (let i=0; i<=maxHops && cur; i++, cur = cur.parentElement) {
    const val = pickLowestNumber(cleanText(cur));
    if (val != null) return val;
  }
  return null;
}

// --- image helpers ---
function collectImgCandidates(root){
  const list = [];
  for (const img of root.querySelectorAll('img')) {
    const src = img.getAttribute('src');
    if (src) list.push(src);
    const srcset = img.getAttribute('srcset');
    if (srcset) {
      const big = srcset.split(',').map(s => s.trim().split(' ')[0]).filter(Boolean).pop();
      if (big) list.push(big);
    }
  }
  // CSS background-image (common in sliders)
  const bgElems = root.querySelectorAll('[style*="background-image"]');
  for (const el of bgElems) {
    const m = (el.getAttribute('style')||'').match(/url\((['"]?)(.*?)\1\)/);
    if (m && m[2]) list.push(m[2]);
  }
  return list;
}
function filterImageUrls(urls=[]) {
  const seen = new Set();
  const out  = [];
  for (let u of urls) {
    if (!u) continue;
    if (!/^https?:/i.test(u)) continue;
    if (u.startsWith('data:')) continue;
    const bare = String(u).split('?')[0];
    if (!IMG_EXT_RE.test(bare)) continue;
    if (/(sprite|logo|icon|badge|swatch|poster|play|video|360|favicon)/i.test(bare)) continue;

    // canonicalize filename (strip simple CDN transforms)
    const key = bare.replace(/\/(?:cache|fit|transform|w_\d+|h_\d+)\/.+?\//g, '/');
    if (seen.has(key)) continue;
    seen.add(key);
    out.push(u);
  }
  return out.slice(0, 20);
}
function isGoodImages(arr){ return Array.isArray(arr) && arr.length >= 3; }
