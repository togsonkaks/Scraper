// ---- DROP-IN REPLACEMENT FOR AMZ.images ----
AMZ.images = function images(doc = document) {
  // route logs to orchestrator if present
  const debug = (msg) => (window.__tg_debugLog ? window.__tg_debugLog(msg) : console.log(msg));

  // Use BOTH: sanitized doc (selectors) + live doc (a-state scripts)
  const live = window.document || doc;

  // tokens: _AC_UL116_SR116,116_, _SL1500_, _UX999_, _CRx,y,w,h_, etc.
  const SIZE = /_(AC|SL|SX|SY|SR|SS|UX|UY|FM|UL|US)\d+(?:,\d+)*_/g;
  const AMZ_HOST = /(m\.media-amazon\.com|images-na\.ssl-images-amazon\.com|images-amazon\.com)\/images\/I\//;

  const isAmz = (u) => typeof u === "string" && AMZ_HOST.test(u);
  const clean = (u) => (u || "").split("?")[0].replace(/%2B/gi, "+");

  // normalize: drop crops, upsize, keep _AC_ if present
  const normalize = (u) =>
    clean(u)
      .replace(/_CR\d+,\d+,\d+,\d+_/g, "_")      // remove crop box
      .replace(SIZE, "_SL1500_");               // force large size

  const baseKey = (u) => clean(u).replace(/^.*\/I\//, "").replace(/\._.*$/, "");
  const out = new Map(); // baseKey -> url
  const add = (u) => {
    if (!isAmz(u)) return;
    const n = normalize(u);
    const k = baseKey(n);
    if (!out.has(k)) out.set(k, n);
  };

  // 1) data-a-dynamic-image (sanitized DOM still has attributes)
  doc.querySelectorAll('img[data-a-dynamic-image]').forEach((img) => {
    try {
      const map = JSON.parse(img.getAttribute("data-a-dynamic-image"));
      Object.keys(map).forEach(add);
    } catch {}
  });

  // 2) explicit hi-res attributes
  doc
    .querySelectorAll(
      'img[data-old-hires], img[data-a-hires], img[data-zoom-image], img[data-large-image]'
    )
    .forEach((img) => {
      ["data-old-hires", "data-a-hires", "data-zoom-image", "data-large-image"].forEach((a) => {
        const u = img.getAttribute(a);
        if (u) add(u);
      });
    });

  // 3) immersive viewer (if open)
  doc.querySelectorAll("img.fullscreen, .ivLargeImage img").forEach((img) => {
    const u = img.currentSrc || img.src;
    if (u) add(u);
  });

  // 4) a-state / application json â€” MUST read from LIVE DOM (sanitized doc strips scripts)
  const aStateScripts =
    live.querySelectorAll('script[type="a-state"][data-a-state],script[type="application/json"][data-a-state]') || [];
  debug(`Amazon a-state scripts: live=${aStateScripts.length}`);

  aStateScripts.forEach((s) => {
    try {
      const keyAttr = s.getAttribute("data-a-state");
      const key = keyAttr ? JSON.parse(keyAttr).key || "" : "";
      if (!/image\-block\-state|dpx\-image\-state|imageState/i.test(key)) return;

      const payload = JSON.parse(s.textContent || "{}");

      const gallery =
        payload?.imageGalleryData ||
        payload?.colorImages?.initial ||
        payload?.imageBlock?.imageGalleryData ||
        [];

      (gallery || []).forEach((o) =>
        ["hiRes", "mainUrl", "large", "zoom", "thumb", "variant"].forEach((k) => o?.[k] && add(o[k]))
      );

      const atf = payload?.ImageBlockATF || payload?.imageBlock?.ImageBlockATF;
      if (atf?.hiRes) add(atf.hiRes);
      (atf?.variant || []).forEach(add);
    } catch (e) {
      debug(`Amazon a-state parse error: ${e.message}`);
    }
  });

  // 5) last resort: any inline product-looking <img> (sanitized doc)
  if (out.size === 0) {
    doc.querySelectorAll('img[src*="/images/I/"]').forEach((img) => {
      const u = img.currentSrc || img.src;
      if (u && !/sprite|grey\-pixel|\.gif$/i.test(u)) add(u);
    });
    debug("Amazon fallback <img> scan used (no a-state yet)");
  }

  const result = Array.from(out.values()).sort((a, b) => {
    const aj = a.endsWith(".jpg") ? 0 : 1;
    const bj = b.endsWith(".jpg") ? 0 : 1;
    return aj - bj || a.localeCompare(b);
  });

  debug(`Amazon hi-res result count: ${result.length}`);
  return result.slice(0, 20);
};
